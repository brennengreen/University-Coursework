/******************************************
Class: CS216-002
Assignment: Project 1
Title: Math Tutor
Purpose: A math tutoring program for a child
who wants to practice his multiplication,
addition, and subtraction skills
Author: Brennen Green
******************************************/

#include <iostream>
#include <iomanip>
#include "MathOperations.h"
#include "MathReport.h"

using namespace std;

// Method Prototypes (Declaration Below Main)
MathOperations generateAddition();
MathOperations generateSubtraction();
MathOperations generateMultiplication();

/***********************************************
Method: Main
Purpose: Control execution flow of program
Returns: 0 <integer> if program exits without
failure
***********************************************/
int main() {
	int in = 0; // Variable to store user menu input
	MathReport report = MathReport(); // Report to store questions in as the user answers them
	while (in != 4) // While user did not choose to quit
	{	
		// Display user option menu
		cout << "Please choose an option  " << endl;
		cout << "=========================" << endl;
		cout << "1. Addition Problem      " << endl;
		cout << "2. Subtraction problem   " << endl;
		cout << "3. Multiplication Problem" << endl;
		cout << "4. Quit Program          " << endl;
		cin >> in;
		while (cin.fail()) // Validate that the input is valid, if not reprompt user
		{
			cin.clear();
			cin.ignore(256, '\n');
			cout << "Invalid Input! Try again: ";
			cin >> in;
		}	
		
		MathOperations op; // MathOperations object which will store the typo operations the user selected
		switch (in) // Switch in order to execute proper generation command
		{
			case 1: // Addition Problem
			{
				// Generate Addition Operator
				op = generateAddition();
				break;
			}
			case 2: // Subtraction Problem
				// Generate Subtraction operator
				op = generateSubtraction();
				break;
			case 3: // Multiplication Problem
				// Generate multiplication Operator
				op = generateMultiplication();
				break;
			case 4: // Quit
				break;
			default:
				cout << "Invalid Option! Valid Option (1-4)\n";
		}
		
		if (in < 4 & in > 0) // If user actually chose a valid option other than quit
		{
			op.print(); // Display the opertion generated by the switch
			int answer; // Variable to stoe user inser
			cin >> answer;
			while (cin.fail()) // Validate the user answer, if invalid re-prompt user
			{
				cin.clear();
				cin.ignore(256, '\n');
				cout << "Invalid Input! Try again: ";
				cin >> answer;
			}
			if (op.checkAnswer(answer)) // If the user provided the correct answer
			{
				cout << "Correct!" << endl;
			}
			else
			{
				cout << "Better luck next time!" << endl;
				cout << "Correct answer: " << op.getAnswer() << endl;	
			}
			cout << endl; // Spacing for format
			report.insert(op, answer); // Inser the question into the MathReport object
		}	
	}
	
	cout << endl;
	report.generateReport(); // Generate the final report for the program before exiting
	return 0;
}
/*********************************************
Method: generateMultiplication

Purpose: Construct a MathOperations object which
will be used in main to prompt the user with a 
multiplication question

Returns: MathOperations op, a MathOperations object
with two operands and set to the Multiplication operator

*********************************************/


MathOperations generateMultiplication() {
	int numOne = rand() % 100 + 1; // Random number between [1, 100]
	int scalar = rand() % 9 + 1; // Random number between [1, 9]
	MathOperations op = MathOperations();
	op.setOperands(numOne, scalar);
	op.Multiplication(); // Set operator type
	return op;
}

/***********************************************
 Method: generateSubtraction

 Purpose: Generations a MathOperation constructed
 to produce a subtraction question for the user

 Returns: MathOperation op , a MathOperation with
 two initialized operands and set to Subtraction
***********************************************/

MathOperations generateSubtraction() {
	int numOne = rand() % 500 + 1; // Random number between [1, 500]
	int numTwo = rand() % 500 + 1; // Random number between [1, 500]
	
	MathOperations op = MathOperations();
	// Conditional statement to ensure the larger value is the first operand which will
	// result in the answer always being positive
	if (numOne > numTwo)
	{
		op.setOperands(numOne, numTwo);
	}
	else
	{
		op.setOperands(numTwo, numOne);
	}
	op.Subtraction(); // Set operator type
	return op;
}

/***********************************************
Method: generateAddition

Purpose: Generations a MathOperation constructed
to produce an addition question for the user

Returns: MathOperation op , a MathOperation with
two initialized operands and set to Addition
***********************************************/

MathOperations generateAddition() {
	int numOne = rand() % 500 + 1; // Random number between [1, 500]
	int numTwo = rand() % 500 + 1; // Random number between [1, 500]
	MathOperations op = MathOperations();
	op.setOperands(numOne, numTwo);
	op.Addition(); // Set operator type
	return op;
}
